{"version":3,"sources":["lib/prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/converter.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/index-light","src/index-minimal.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/minimal.js","src/verifier.js","src/writer.js","src/writer_buffer.js"],"names":["global","undefined","modules","cache","entries","$require","name","$module","call","exports","protobuf","define","amd","Long","util","configure","module","1","require","asPromise","fn","ctx","params","i","arguments","length","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","n","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","t","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","Error","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","floor","JSON","stringify","supported","e","EventEmitter","_listeners","prototype","on","evt","off","listeners","splice","emit","fetch","filename","options","callback","xhr","fs","readFile","contents","XMLHttpRequest","binary","toString","inquire","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","moduleName","mod","eval","path","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","ctor","Type","TypeError","Message","constructor","merge","$type","fieldsArray","_fieldsArray","isArray","defaultValue","emptyArray","isObject","long","emptyObject","ctorProperties","oneofsArray","_oneofsArray","get","oneOfGetter","oneof","set","oneOfSetter","defineProperties","create","genValuePartial_fromObject","field","fieldIndex","prop","resolvedType","Enum","values","repeated","typeDefault","fullName","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","fields","safeProp","toObject","repeatedFields","mapFields","otherFields","valuesById","low","high","unsigned","toNumber","bytes","decoder","group","ref","id","keyType","types","basic","compat","packed","genTypePartial","encoder","partOf","wireType","mapKey","required","indexOf","ReflectionObject","comments","className","fromJSON","json","toJSON","add","comment","isString","isInteger","allow_alias","remove","val","Field","rule","extend","toLowerCase","optional","message","extensionField","declaringField","_packed","defineProperty","getOption","setOption","value","ifNotSet","resolved","defaults","parent","lookup","fromNumber","freeze","newBuffer","load","root","Root","loadSync","build","verifier","Namespace","OneOf","MapField","Service","Method","_configure","Reader","BufferReader","roots","Writer","BufferWriter","rpc","resolvedKeyType","properties","writer","encodeDelimited","reader","decodeDelimited","verify","object","from","toJSONOptions","requestType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","nested","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","ns","names","methods","getEnum","setOptions","onAdd","onRemove","ptr","part","resolveAll","filterType","parentAlreadyChecked","found","lookupService","lookupEnum","Type_","Service_","unshift","_handleAdd","_handleRemove","Root_","fieldNames","addFieldsToParent","index","self","indexOutOfRange","writeLength","RangeError","pos","readLongVarint","bits","LongBits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","skip","skipType","BufferReader_","int64","uint64","sint64","fixed64","sfixed64","utf8Slice","min","deferred","files","SYNC","tryHandleExtension","extendedType","sisterField","parse","common","resolvePath","finish","cb","sync","process","parsed","imports","weakImports","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","isNode","exposeRe","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","endedByRPC","_methodsArray","service","inherited","methodsArray","rpcService","lcFirst","m","q","s","oneofs","extensions","reserved","_fieldsById","_ctor","fieldsById","filter","isReservedId","isReservedName","setup","fork","ldelim","bake","o","ucFirst","toUpperCase","zero","zzEncode","zeroHash","parseInt","fromString","fromHash","hash","toHash","mask","part0","part1","part2","versions","node","Number","isFinite","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","longToHash","longFromHash","fromBits","dst","fieldMap","lazyResolve","lazyTypes","longs","enums","encoding","allocUnsafe","invalid","expected","genVerifyValue","genVerifyKey","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\r\n    // \"use strict\" directive so that minification can remove the directives of each module.\r\n\r\n    function $require(name) {\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    }\r\n\r\n    // Expose globally\r\n    var protobuf = global.protobuf = $require(entries[0]);\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) {\r\n            protobuf.util.Long = Long;\r\n            protobuf.configure();\r\n            return protobuf;\r\n        });\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue)(?: \\w+)?;?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function\" + (name ? \" \" + name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    format = format.replace(/%([dfjs])/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"d\":\r\n                return Math.floor(args[i++]);\r\n            case \"f\":\r\n                return Number(args[i++]);\r\n            case \"j\":\r\n                return JSON.stringify(args[i++]);\r\n            default:\r\n                return args[i++];\r\n        }\r\n    });\r\n    if (i !== args.length)\r\n        throw Error(\"argument count mismatch\");\r\n    return format;\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(6);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(19),\r\n    util    = require(32);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction Class(type, ctor) {\r\n    if (!Type)\r\n        Type = require(30);\r\n\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        // create named constructor functions (codegen is required anyway)\r\n        ctor = util.codegen(\"p\")(\"return c.call(this,p)\").eof(type.name, {\r\n            c: Message\r\n        });\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    (ctor.prototype = new Message()).constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    ctor.prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    var i = 0;\r\n    for (; i < /* initializes */ type.fieldsArray.length; ++i) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        ctor.prototype[type._fieldsArray[i].name] = Array.isArray(type._fieldsArray[i].resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(type._fieldsArray[i].defaultValue) && !type._fieldsArray[i].long\r\n              ? util.emptyObject\r\n              : type._fieldsArray[i].defaultValue; // if a long, it is frozen when initialized\r\n    }\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    var ctorProperties = {};\r\n    for (i = 0; i < /* initializes */ type.oneofsArray.length; ++i)\r\n        ctorProperties[type._oneofsArray[i].resolve().name] = {\r\n            get: util.oneOfGetter(type._oneofsArray[i].oneof),\r\n            set: util.oneOfSetter(type._oneofsArray[i].oneof)\r\n        };\r\n    if (i)\r\n        Object.defineProperties(ctor.prototype, ctorProperties);\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return ctor.prototype;\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @function\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nClass.create = Class;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @name Class#fromObject\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Class#fromObject}.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @name Class#toObject\r\n * @function\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(14),\r\n    util = require(32);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %j:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":gen\r\n                (\"m%s=Number(d%s)\", prop, prop);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"d\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!==undefined&&d%s!==null){\", prop, prop);\r\n        genValuePartial_fromObject(gen, field, i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        otherFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (fields[i].resolve().repeated)\r\n            repeatedFields.push(fields[i]);\r\n        else if (fields[i].map)\r\n            mapFields.push(fields[i]);\r\n        else\r\n            otherFields.push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (otherFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0, field; i < otherFields.length; ++i) {\r\n            var field = otherFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    for (i = 0, field; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            prop  = util.safeProp(field.name); gen\r\n    (\"if(m%s!==undefined&&m%s!==null&&m.hasOwnProperty(%j)){\", prop, prop, field.name);\r\n        if (field.map) { gen\r\n        (\"d%s={}\", prop)\r\n        (\"for(var ks2=Object.keys(m%s),j=0;j<ks2.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[j]\")\r\n        (\"}\");\r\n        } else\r\n        genValuePartial_toObject(gen, field, i, prop);\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\ndecoder.compat = true;\r\n\r\nvar Enum    = require(14),\r\n    types   = require(31),\r\n    util    = require(32);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} compat=true Generates backward/forward compatible decoders (packed fields)\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if ((decoder.compat || field.packed) && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(14),\r\n    types    = require(31),\r\n    util     = require(32);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field    = mtype._fieldsArray[i].resolve();\r\n        if (field.partOf) // see below for oneofs\r\n            continue;\r\n        var type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length&&m.hasOwnProperty(%j)){\", ref, ref, field.name)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\")\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n                gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&m.hasOwnProperty(%j))\", ref, ref, field.name);\r\n                else if (field.bytes || field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n    (\"if(%s&&m.hasOwnProperty(%j))\", ref, field.name);\r\n                else gen\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j))\", ref, field.name);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    // oneofs\r\n    for (var i = 0; i < /* initializes */ mtype.oneofsArray.length; ++i) {\r\n        var oneof = mtype._oneofsArray[i]; gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        for (var j = 0; j < /* direct */ oneof.fieldsArray.length; ++j) {\r\n            var field    = oneof.fieldsArray[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name); gen\r\n            (\"case%j:\", field.name);\r\n            if (wireType === undefined)\r\n                genTypePartial(gen, field, mtype._fieldsArray.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n                (\"break\");\r\n        } gen\r\n        (\"}\");\r\n    }\r\n    \r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnum.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {?string} comment Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name\");\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id\");\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"name does not exist\");\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(14),\r\n    types = require(31),\r\n    util  = require(32);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n\r\n        /* istanbul ignore if */\r\n        if (!Type)\r\n            Type = require(30);\r\n\r\n        var scope = this.declaringField ? this.declaringField.parent : this.parent;\r\n        if (this.resolvedType = scope.lookup(this.type, Type))\r\n            this.typeDefault = null;\r\n        else if (this.resolvedType = scope.lookup(this.type, Enum))\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type + \" in \" + scope);\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary packed option (parser adds this) if not referencing an enum\r\n    if (this.options && this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n        delete this.options.packed;\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(17);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(13);\r\nprotobuf.decoder          = require(12);\r\nprotobuf.verifier         = require(35);\r\nprotobuf.converter        = require(11);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(22);\r\nprotobuf.Namespace        = require(21);\r\nprotobuf.Root             = require(26);\r\nprotobuf.Enum             = require(14);\r\nprotobuf.Type             = require(30);\r\nprotobuf.Field            = require(15);\r\nprotobuf.OneOf            = require(23);\r\nprotobuf.MapField         = require(18);\r\nprotobuf.Service          = require(29);\r\nprotobuf.Method           = require(20);\r\n\r\n// Runtime\r\nprotobuf.Class            = require(10);\r\nprotobuf.Message          = require(19);\r\n\r\n// Utility\r\nprotobuf.types            = require(31);\r\nprotobuf.util             = require(32);\r\n\r\n// Configure reflection\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\r\nprotobuf.Root._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n * \r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n * \r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(36);\r\nprotobuf.BufferWriter = require(37);\r\nprotobuf.Reader       = require(24);\r\nprotobuf.BufferReader = require(25);\r\n\r\n// Utility\r\nprotobuf.util         = require(34);\r\nprotobuf.rpc          = require(27);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(15);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(31),\r\n    util    = require(32);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Message.fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = Message.fromObject;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Creates a plain object from this message. Also converts values to other types if specified.\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.prototype.toObject = function toObject(options) {\r\n    return this.$type.toObject(this, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(14),\r\n    Field    = require(15),\r\n    util     = require(32);\r\n\r\nvar Type,    // cyclic\r\n    Service; // \"\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nNamespace.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterType || found instanceof filterType)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n            return found;\r\n    }\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n\r\nNamespace._configure = function(Type_, Service_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(32);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {?string}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {?string}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(15);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n}\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).toLong(false);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).toNumber(false);\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        /* istanbul ignore next */\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        Reader.prototype.int64 = read_int64_long;\r\n        Reader.prototype.uint64 = read_uint64_long;\r\n        Reader.prototype.sint64 = read_sint64_long;\r\n        Reader.prototype.fixed64 = read_fixed64_long;\r\n        Reader.prototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        Reader.prototype.int64 = read_int64_number;\r\n        Reader.prototype.uint64 = read_uint64_number;\r\n        Reader.prototype.sint64 = read_sint64_number;\r\n        Reader.prototype.fixed64 = read_fixed64_number;\r\n        Reader.prototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(24);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(15),\r\n    Enum    = require(14),\r\n    util    = require(32);\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {?string} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n    \r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore next */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore next */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else /* istanbul ignore next */ if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @name Root#loadSync\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {   \r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type = Type_;\r\n    parse = parse_;\r\n    common = common_;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {?Uint8Array} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(28);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(34);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n * \r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any\r\n * @param {?Message} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.ServiceMethodMixin|ServiceMethodMixin} and thus {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @type {function}\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * A service method mixin.\r\n * \r\n * When using TypeScript, mixed in service methods are only supported directly with a type definition of a static module (used with reflection). Otherwise, explicit casting is required.\r\n * @typedef rpc.ServiceMethodMixin\r\n * @type {Object.<string,rpc.ServiceMethod>}\r\n * @example\r\n * // Explicit casting with TypeScript\r\n * (myRpcService[\"myMethod\"] as protobuf.rpc.ServiceMethod)(...)\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @augments rpc.ServiceMethodMixin\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method\r\n * @param {function} requestCtor Request constructor\r\n * @param {function} responseCtor Response constructor\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} callback Service callback\r\n * @returns {undefined}\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(20),\r\n    util   = require(32),\r\n    rpc    = require(27);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    return service;\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        rpcService[util.lcFirst(this._methodsArray[i].resolve().name)] = util.codegen(\"r\",\"c\")(\"return this.rpcCall(m,q,s,r,c)\").eof(util.lcFirst(this._methodsArray[i].name), {\r\n            m: this._methodsArray[i],\r\n            q: this._methodsArray[i].resolvedRequestType.ctor,\r\n            s: this._methodsArray[i].resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(14),\r\n    OneOf     = require(23),\r\n    Field     = require(15),\r\n    MapField  = require(18),\r\n    Service   = require(29),\r\n    Class     = require(10),\r\n    Message   = require(19),\r\n    Reader    = require(24),\r\n    Writer    = require(36),\r\n    util      = require(32),\r\n    encoder   = require(13),\r\n    decoder   = require(12),\r\n    verifier  = require(35),\r\n    converter = require(11);\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            /* istanbul ignore next */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n        \r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        /* istanbul ignore next */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        /* istanbul ignore next */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) {\r\n    if (this.reserved)\r\n        for (var i = 0; i < this.reserved.length; ++i)\r\n            if (typeof this.reserved[i] !== \"string\" && this.reserved[i][0] <= id && this.reserved[i][1] >= id)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) {\r\n    if (this.reserved)\r\n        for (var i = 0; i < this.reserved.length; ++i)\r\n            if (this.reserved[i] === name)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = this.from = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Type#fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.from = Type.prototype.fromObject;\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @typedef ConversionOptions\r\n * @type {Object}\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(32);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(34);\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(7);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    var array = [];\r\n    if (object)\r\n        for (var keys = Object.keys(object), i = 0; i < keys.length; ++i)\r\n            array.push(object[keys[i]]);\r\n    return array;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * \r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(1);\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(2);\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(4);\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(6);\r\n\r\n// convert to / from utf8 encoded strings\r\nutil.utf8 = require(9);\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(8);\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(33);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Internal alias of or polyfull for Buffer.from.\r\n * @type {?function}\r\n * @param {string|number[]} value Value\r\n * @param {string} [encoding] Encoding if value is a string\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_from = null;\r\n\r\n/**\r\n * Internal alias of or polyfill for Buffer.allocUnsafe.\r\n * @type {?function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    for (var i = 0; i < lazyTypes.length; ++i) {\r\n        for (var keys = Object.keys(lazyTypes[i]), j = 0; j < keys.length; ++j) {\r\n            var path = lazyTypes[i][keys[j]].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            lazyTypes[i][keys[j]] = ptr;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Default conversion options used for toJSON implementations. Converts longs, enums and bytes to strings.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(14),\r\n    util      = require(32);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %d:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%d].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9][0-9]*)$/.test(%s))\", ref) // it's important not to use any literals here that might be confused with short variable names by pbjs' beautify\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    var gen = util.codegen(\"m\")\r\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\r\n        (\"return%j\", \"object expected\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this.push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len).push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(36);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(34);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n"],"sourceRoot":"."}